'''create_tree.py creates md5 checksums for all files in a folder and subfolders.

This script generates an indexed md5 checksum for every file in the directory.
It does not verify checksums. Please see verify_tree.py for verification.
'''

import hashlib
import os
import sys

py_version = sys.version_info.major

def md5_for_file(f, block_size=2**20):
    '''This function, md5_for_file was copied from StackOverflow, used under the
    Creative Commons license outlined at:
    http://blog.stackoverflow.com/2009/06/attribution-required/

    StackOverflow User Yuval Adam.
    http://stackoverflow.com/users/24545/yuval-adam
    Code:
    http://stackoverflow.com/questions/1131220/get-md5-hash-of-big-files-in-python#1131238
    '''
    m = hashlib.md5()
    with open(f, "rb") as f:
        while True:
            buf = f.read(block_size)
            if not buf:
                break
            m.update( buf )
    return m.hexdigest()

def main():
    folder = os.getcwd()
    for root, dirs, files in os.walk(folder):
        for f in files:
            if f.startswith('.'):
                continue
            full_file = os.path.join(root, f)
            new = os.path.join(full_file+'.md5')
            if os.path.isfile(new):
                continue
            elif '.md5.' in new:
                continue
            else:
                try:
                    print("Making MD5 for {} now.".format(full_file))
                except UnicodeEncodeError:
                    print("Making MD5 for a file with special characters in its name now.")
                    print("\n* * * * * * * * * * * * * * * * * * * * * * * *\n")
                    print("  DOES THIS FILE WITH SPECIAL CHARACTERS IN")
                    print("  ITS NAME NEED TO BE RENAMED?")
                    print("  {}\n".format(full_file.encode()))
                    print("* * * * * * * * * * * * * * * * * * * * * * * *\n")
                try:
                    m = md5_for_file(full_file)
                except IOError:
                    print("\n* * * * * * * * * * * * * * * * * * * * * * * *\n")
                    print("An MD5 checksum cannot be generated for {} with this version of Python.".format(full_file.encode()))
                    print("\n* * * * * * * * * * * * * * * * * * * * * * * *\n")
                    continue
                if py_version == 2:
                    with open(new, 'w') as n:
                        n.write('; Generated by create.py\r\n')
                        n.write('; You may find a copy at https://github.com/hooverinstitutionla/md5_utilities\r\n')
                        n.write(m+' *'+full_file)
                else:
                    with open(new, 'w', encoding='utf8') as n:
                        n.write('; Generated by create.py\r\n')
                        n.write('; You may find a copy at https://github.com/hooverinstitutionla/md5_utilities\r\n')
                        n.write(m+' *'+full_file)

    print("\nDone!\n")


if __name__ == '__main__':
    main()
